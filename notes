URL: https://www.youtube.com/watch?v=cuEtnrL9-H0&list=PLBx8Eyw3km2no5C_A2HLY5Z9FD-rGtHCv&index=8
Title: Learn Fetch API in 6 Minutes
start: 5:46am 4/5/22
end:

Accessing data from an API 
    is one of the most common things 
        you will do in web development
            and the way to access APIs is with Fetch
Fetch is a function built into JavaScript 
    that allows you to query any
        URL/API to get back data
The most important part is that fetch is    
    asynchronous so it will run in the background
        and let you know when it finishes using promises
In this file 
    we will go through
        exactly how to use fetch
            and all of the common mistakes people make
                using fetch so we can get up and running 
                    in just six minutes
//Setup Test
- just creat a regular html page with a 
    javascript script tag at the bottom of the body
        src it to you second page which is .js
- console.log("Hello")
    to make sure its working

// Ex. 1
- console log a fetch
    first you need to pass it a URL as property 1
syntax:
            fetch("yourURLfromWhereYouHopeToGetInfoFrom") {
                // what ever info you want
                // what you want to do with the info
            }
- the return 
     "Promise {<pending>}"
        Fetch is promised based
            which means that we can use async await
                or .then or .catch with it
// Ex. 2
- next we are going to add
    .then()
        with a response object inside "res"
            and then log out the response
                and thats exactly what shows in the console log
- we have
        body: ReadableStream----------> all of our data
        bodyUsed: false
        headers: Headers {}
        ok: true --------------------------> success
        redirected: false
        status: 200-----------------------> success
        statusText: ""---------------------> empty
        type: "cors"
        url: "https://reqres.in/api/users"
- but this body of data 
        isn't accessible directly from the 
            response object
// Ex.3
- we need to call a method
    on it to convert this response to
        JSON, bc we are using JSON data
            so after the res object
                deliver (=>) it to a another
                    res.json() object
                        which will return another promise
                            and we us .then again
                                with our actual data 
                                    passed to the console
                                        which calls the data
- Returns all the users 
    in an array
        each user is its own object

// Ex. 4
- Lets say we want to get info on a single user
    in this example we will get the info
        of a single user that does not exist
            which will return a 404 status back
                but our GET request actually happened
                    still ran our successful dot then code
                        even though we had a 404 error
// Ex. 5
- you would think that sense 
    404 is an error that it would end up
        in a catch statement
- but we are not getting any ERROR text
    this is bc fetch will always work
        except if you have no internet signal
            fetch always succeeds unless 
                there is something wrong with the fetch itself
                    not with the API it is calling
// Ex.6
- So what we need to do is to put  responses
    inside the return
        to make sure the fetch is good or bad

// Ex. 7
- Take the 23 away
     and it is now successful

// Ex. 8
- Most of the time with Fetch
    you want to do more then just get data from the server
        you actually want to post data to a server
            update and delete data
- In order to do all this
    we are going to have to use the option section 
        of the Fetch Method    
            and the first thing that we have to do is to    
                pass in a method
                    this can be either "Get", "Post", "Put", "Delete"
                    (one of the HTTP methods) 
- In this case we will use a Post request
    we are going to create a new user at this API
        just by doing a post request
- Then we need to pass the data for that user
    which is going to go inside of the body
        and we are going to pass that as JSON
- which won't work 
    bc the body didn't get sent up correctly

// Ex.9
- the way that fetch works
    is that you actually need to send it JSON
        so do JSON.stringify
            and stringify the object you are passing it
- which is still not working
    thats bc you also have to set the headers
        essentially you need to tell fetch 
            that you're going to be passing JSON
            
//10
- so create a header section
    under which define the content type as
        application/json

- Main thing that you need to remember
    when using anything with JSON data
        that your posting to the server
            you need to be sure to set the header 
                to the correct content type of application JSON
                    and you also need to stringify the body
                        so you can't just send a JS object
                            you have to convert it to a JSON string


